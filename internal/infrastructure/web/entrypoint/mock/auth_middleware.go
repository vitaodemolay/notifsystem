// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vitaodemolay/notifsystem/internal/infrastructure/web/entrypoint (interfaces: IdentityProvider)
//
// Generated by this command:
//
//	mockgen -package=mock -destination=./mock/auth_middleware.go . IdentityProvider
//

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIdentityProvider is a mock of IdentityProvider interface.
type MockIdentityProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityProviderMockRecorder
	isgomock struct{}
}

// MockIdentityProviderMockRecorder is the mock recorder for MockIdentityProvider.
type MockIdentityProviderMockRecorder struct {
	mock *MockIdentityProvider
}

// NewMockIdentityProvider creates a new mock instance.
func NewMockIdentityProvider(ctrl *gomock.Controller) *MockIdentityProvider {
	mock := &MockIdentityProvider{ctrl: ctrl}
	mock.recorder = &MockIdentityProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityProvider) EXPECT() *MockIdentityProviderMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockIdentityProvider) Auth(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockIdentityProviderMockRecorder) Auth(next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockIdentityProvider)(nil).Auth), next)
}
