// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vitaodemolay/notifsystem/internal/application/service/campaign (interfaces: CampaignService)
//
// Generated by this command:
//
//	mockgen -package=mock -destination=./mock/campaign.go . CampaignService
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	campaign "github.com/vitaodemolay/notifsystem/internal/application/contract/campaign"
	gomock "go.uber.org/mock/gomock"
)

// MockCampaignService is a mock of CampaignService interface.
type MockCampaignService struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignServiceMockRecorder
	isgomock struct{}
}

// MockCampaignServiceMockRecorder is the mock recorder for MockCampaignService.
type MockCampaignServiceMockRecorder struct {
	mock *MockCampaignService
}

// NewMockCampaignService creates a new mock instance.
func NewMockCampaignService(ctrl *gomock.Controller) *MockCampaignService {
	mock := &MockCampaignService{ctrl: ctrl}
	mock.recorder = &MockCampaignServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignService) EXPECT() *MockCampaignServiceMockRecorder {
	return m.recorder
}

// CreateCampaign mocks base method.
func (m *MockCampaignService) CreateCampaign(request *campaign.CreateCampaign) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaign", request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaign indicates an expected call of CreateCampaign.
func (mr *MockCampaignServiceMockRecorder) CreateCampaign(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaign", reflect.TypeOf((*MockCampaignService)(nil).CreateCampaign), request)
}
