// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vitaodemolay/notifsystem/internal/domain/repository/campaign (interfaces: CampaignRepository)
//
// Generated by this command:
//
//	mockgen -package=mock -destination=./mock/campaign.go . CampaignRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	campaign "github.com/vitaodemolay/notifsystem/internal/domain/model/campaign"
	gomock "go.uber.org/mock/gomock"
)

// MockCampaignRepository is a mock of CampaignRepository interface.
type MockCampaignRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignRepositoryMockRecorder
	isgomock struct{}
}

// MockCampaignRepositoryMockRecorder is the mock recorder for MockCampaignRepository.
type MockCampaignRepositoryMockRecorder struct {
	mock *MockCampaignRepository
}

// NewMockCampaignRepository creates a new mock instance.
func NewMockCampaignRepository(ctrl *gomock.Controller) *MockCampaignRepository {
	mock := &MockCampaignRepository{ctrl: ctrl}
	mock.recorder = &MockCampaignRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignRepository) EXPECT() *MockCampaignRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockCampaignRepository) Save(arg0 *campaign.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCampaignRepositoryMockRecorder) Save(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCampaignRepository)(nil).Save), arg0)
}
